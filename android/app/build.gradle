def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def secretProperties = new Properties()
def secretPropertiesFile = rootProject.file('secret.properties')
if (secretPropertiesFile.exists()) {
  secretProperties.load(new FileInputStream(secretPropertiesFile))
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
    
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId ANDROID_APPLICATION_ID
        minSdkVersion 26
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "app_name", APP_NAME

        manifestPlaceholders = [ADMOB_APP_ID: "${secretProperties['admobAppIdentifier']}", applicationName: "android.app.Application"]
    }

    signingConfigs {
        release {
            keyAlias secretProperties['keyAlias']
            keyPassword secretProperties['keyPassword']
            storeFile secretProperties['storeFile'] ? file(secretProperties['storeFile']) : null
            storePassword secretProperties['storePassword']
        }
    }
    flavorDimensions "flavor-type"

    buildTypes {
        debug {
            resValue "string", "PREFERENCE_KEY", "preference_key.com.mizuki.Ohashi.Pilll.development"
        }
        release {
            resValue "string", "PREFERENCE_KEY", "preference_key.com.mizuki.Ohashi.Pilll"

            ndk {
              debugSymbolLevel 'SYMBOL_TABLE'
            }
            signingConfig signingConfigs.release
        }
    }
    ndkVersion '23.1.7779620'
    buildFeatures {
        viewBinding true
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-messaging:20.1.6'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'
    // https://pub.dev/packages/flutter_local_notifications#-android-setup
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    // https://pub.dev/packages/flutter_local_notifications#-android-setup
    // > There have been reports that enabling desugaring may result in a Flutter apps crashing on Android 12L and above. This would be an issue with Flutter itself, not the plugin. One possible fix is adding the WindowManager library as a dependency:
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

task copySources(type: Copy) {
   from "src/$FLAVOR/res"
   into 'src/main/res'
}
tasks.whenTaskAdded { task ->
   task.dependsOn copySources
}

task selectGoogleServicesJson(type: Copy) {
    from "src/$FLAVOR/google-services.json"
    into './'
}
tasks.whenTaskAdded { task ->
    if (task.name == 'processDebugGoogleServices' || task.name == 'processReleaseGoogleServices') {
        task.dependsOn selectGoogleServicesJson
    }
}
